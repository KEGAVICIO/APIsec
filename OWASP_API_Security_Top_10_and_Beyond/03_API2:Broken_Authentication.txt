Attack Vector Description
  "The authentication mechanism is an easy target for attackers since it's exposed to everyone. Although more advanced technical skills may be required to exploit some authentication issues, explotation tools are generally available"


Security Weakness Description
  "Software and security engineers misconceptions regarding authentication boundaries and inherent implementation complexity make authentication issues prevalent. Methodologgies of detecting broken authentication are available and easy to create"

Impacts Description
  "Attackers can gain complete control of other users accounts in the system, read their personal data, and perform sensitive actions on their behalf. Systems are unlikely to be able to distinguish attackers actions from legitimate users ones"

Weak Password Policy
  - Allows users to create simple password 
  - Allows brute force attempts against user accounts
  - Allows users to change their password without asking for password confirmation
  - Allows users to change their account email without asking for password confirmation
  - Discloses token or password in the URL
  - GraphQL queries allow for many authentication attempts in a single request
  - Lacking authentication for sensitive request

Credential Stuffing
  - Attack using large number of username and password combinations
  - Credentials used in these types of attacks are typically collected from data breaches
  - Allows users to brute force many username and password combinations

Predictable Tokens
  - Tokens obtained through a weak token generation authentication process
  - Weak tokens can easily be guessed, deduced, or calculated by an attacker 
  - Using incremental or guessable token IDs

Misconfigured JSON Web Tokens
  - JWTs commonly used for API authentication and authorization
  - Provide flexibility to customize algorithms used for signing the token, the key/secret that is used, and the information used in the payload
  - Security masconfigurations:
    - API provider accepts unsigned JWT tokens
    - API provider does not check JWT expiration
    - API provider discloses sensitive information within encoded JWT payload
    - JWT is signed with a weak key

API Authentication 
  - Rest requires APIs to be stateless
  - APIs, therefore require users to register to acquire tokens 
  - Token is used for future request

Issues with Authentication 
  - Insufficient token randomness (entropy)
  - Vulnerabilities in registration process
  - Password reset process
  - Multi-factor authentication features

OWASP Preventative Measures
  - Know all the possible flows to authenticate to the API 
  - Understand your authentication mechanisms and how they are used - OAuth is not authentication, and neither are API keys
  - Use standards for authentication, token generation, or password storage
  - Treat credential recovery/forgot password endpoints as login endpoints in terms of brute force, rate limiting, and lockout protections
  - Require re-authentication for sensitive operations (e.g., changing the account owner email address/2FA phone number)
  - Use the OWASP Authentication Cheatsheet (https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)
  - Implement multi-factor authentication, where possible
  - Implement anti-brute force mechanisms to mitigate credential stuffing, dictionary attacks, and brute force attacks
  - Implement account lockout/captcha mechanisms to prevent brute force attacks against specific users 
  - Implement weak-password checks
  - API keys should not be used for user authentication - they should only be used for API clients authentication 

Additional Resources 
  - CWE-204: Observable Response Discrepancy
  - CWE-307: Improper Restriction of Excessive Authentication Attempts
  - CWE-798: Use of Hard-coded Credentials
  - Authentication Cheat Sheet
  - Key Management Cheat Sheet
  - Credential Stuffing
  - Web Security Academy: Authentication
  - Web Security Academy: JWT Attacks
